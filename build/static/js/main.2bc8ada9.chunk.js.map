{"version":3,"sources":["../node_modules/gun sync","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","gun","Gun","peers","initialState","messages","reducer","state","message","App","useState","name","formState","setForm","useReducer","dispatch","onChange","target","value","useEffect","get","map","on","m","createdAt","style","padding","placeholder","onClick","set","Date","now","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mHAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,wICJnBC,EAAMC,IAAI,CACdC,MAAO,CACL,+BAKEC,EAAe,CACnBC,SAAU,IAIZ,SAASC,EAAQC,EAAOC,GACtB,MAAO,CACLH,SAAS,CAAEG,GAAH,mBAAeD,EAAMF,YAIlB,SAASI,IAAM,MAEGC,mBAAS,CACtCC,KAAM,GAAIH,QAAS,KAHO,mBAEnBI,EAFmB,KAERC,EAFQ,OAOFC,qBAAWR,EAASF,GAPlB,mBAOrBG,EAPqB,KAOdQ,EAPc,KAoC5B,SAASC,EAASvB,GAChBoB,EAAQ,2BAAKD,GAAN,kBAAkBnB,EAAEwB,OAAON,KAAOlB,EAAEwB,OAAOC,SAGpD,OA7BAC,qBAAU,WACSlB,EAAImB,IAAI,YAChBC,MAAMC,IAAG,SAAAC,GAChBR,EAAS,CACPJ,KAAMY,EAAEZ,KACRH,QAASe,EAAEf,QACXgB,UAAWD,EAAEC,iBAGhB,IAqBD,sBAAKC,MAAO,CAAEC,QAAS,IAAvB,UACE,uBACEV,SAAUA,EACVW,YAAY,OACZhB,KAAK,OACLO,MAAON,EAAUD,OAEnB,uBACEK,SAAUA,EACVW,YAAY,UACZhB,KAAK,UACLO,MAAON,EAAUJ,UAEnB,wBAAQoB,QA/BZ,WACmB3B,EAAImB,IAAI,YAChBS,IAAI,CACXlB,KAAMC,EAAUD,KAChBH,QAASI,EAAUJ,QACnBgB,UAAWM,KAAKC,QAElBlB,EAAQ,CACNF,KAAM,GAAIH,QAAS,MAuBnB,0BAEED,EAAMF,SAASgB,KAAI,SAAAb,GAAO,OACxB,gCACE,6BAAKA,EAAQA,UACb,wCAAWA,EAAQG,QACnB,uCAAUH,EAAQgB,eAHVhB,EAAQgB,iBC/E5B,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClC,EAAD,MAEFmC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2bc8ada9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 22;","import { useEffect, useState, useReducer } from 'react'\r\nimport Gun from 'gun'\r\n\r\n// initialize gun locally\r\nconst gun = Gun({\r\n  peers: [\r\n    'http://localhost:3030/gun'\r\n  ]\r\n})\r\n\r\n// create the initial state to hold the messages\r\nconst initialState = {\r\n  messages: []\r\n}\r\n\r\n// Create a reducer that will update the messages array\r\nfunction reducer(state, message) {\r\n  return {\r\n    messages: [message, ...state.messages]\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  // the form state manages the form input for creating a new message\r\n    const [formState, setForm] = useState({\r\n    name: '', message: ''\r\n  })\r\n\r\n  // initialize the reducer & state for holding the messages array\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  // when the app loads, fetch the current messages and load them into the state\r\n  // this also subscribes to new data as it changes and updates the local state\r\n  useEffect(() => {\r\n    const messages = gun.get('messages')\r\n    messages.map().on(m => {\r\n      dispatch({\r\n        name: m.name,\r\n        message: m.message,\r\n        createdAt: m.createdAt\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  // set a new message in gun, update the local state to reset the form field\r\n  function saveMessage() {\r\n    const messages = gun.get('messages')\r\n    messages.set({\r\n      name: formState.name,\r\n      message: formState.message,\r\n      createdAt: Date.now()\r\n    })\r\n    setForm({\r\n      name: '', message: ''\r\n    })\r\n  }\r\n\r\n  // update the form state as the user types\r\n  function onChange(e) {\r\n    setForm({ ...formState, [e.target.name]: e.target.value  })\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: 30 }}>\r\n      <input\r\n        onChange={onChange}\r\n        placeholder=\"Name\"\r\n        name=\"name\"\r\n        value={formState.name}\r\n      />\r\n      <input\r\n        onChange={onChange}\r\n        placeholder=\"Message\"\r\n        name=\"message\"\r\n        value={formState.message}\r\n      />\r\n      <button onClick={saveMessage}>Send Message</button>\r\n      {\r\n        state.messages.map(message => (\r\n          <div key={message.createdAt}>\r\n            <h2>{message.message}</h2>\r\n            <h3>From: {message.name}</h3>\r\n            <p>Date: {message.createdAt}</p>\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}